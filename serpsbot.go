package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
)

type SerpsBot struct {
	query  string
	apikey string
}

func SerpsGetSuggestions(a *SerpsBot) []string {

	type AutoGenerated struct {
		Gl       string   `json:"gl"`
		Hl       string   `json:"hl"`
		Keywords []string `json:"keywords"`
	}

	type AutoGenerated2 struct {
		Detail []struct {
			Loc  []interface{} `json:"loc"`
			Msg  string        `json:"msg"`
			Type string        `json:"type"`
		} `json:"detail"`
	}

	type AutoGenerated3 struct {
		Meta struct {
			Gl       string   `json:"gl"`
			Hl       string   `json:"hl"`
			Keywords []string `json:"keywords"`
		} `json:"meta"`
		Data []struct {
			Keyword     string   `json:"keyword"`
			Suggestions []string `json:"suggestions"`
		} `json:"data"`
	}

	api := AutoGenerated{
		Gl:       "us",
		Hl:       "en_US",
		Keywords: []string{a.query},
	}

	fmt.Println(api)
	// create request
	b, _ := json.Marshal(api)

	req, err := http.NewRequest("POST", "https://api.serpsbot.com/v2/google/search-suggestions", bytes.NewBuffer(b))
	if err != nil {
		fmt.Println(err)
		return nil
	}
	// fmt.Println(w.FormDataContentType())
	req.Header.Set("X-API-KEY", a.apikey)
	// send request
	client := &http.Client{}
	res, err := client.Do(req)
	if err != nil {
		fmt.Println(err)
		return nil
	}
	defer res.Body.Close()
	// fmt.Println(res)

	if res.StatusCode != 200 {
		// probably 422 error, so decode the error
		var a AutoGenerated2
		err = json.NewDecoder(res.Body).Decode(&a)
		if err != nil {
			log.Fatalln(err)
		}
		fmt.Println(a)
	} else {
		var x AutoGenerated3
		err = json.NewDecoder(res.Body).Decode(&x)
		if err != nil {
			log.Fatalln(err)
		}
		//fmt.Println(x)
		for _, v := range x.Data {
			fmt.Println(v.Keyword)
			for _, v2 := range v.Suggestions {
				fmt.Println("-", v2)
			}
		}

		return x.Data[0].Suggestions
	}
	return nil
}

func main() {
	fmt.Println("SerpsBot v1.0 by ToyBlackHat")
}
